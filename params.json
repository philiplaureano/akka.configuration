{"name":"Akka.Configuration","tagline":"A library for Akka.NET that removes most of the boilerplate code for creating and configuring actor systems.","body":"# akka.configuration\r\nA library for [Akka.NET](http://getakka.net) that handles the boilerplate code for creating and configuring actor systems.\r\n\r\n## Overview\r\nAkka.Configuration is a very simple framework that provides the glue for creating and running actor systems in Akka.NET. It consists of the following interfaces:\r\n\r\n```csharp\r\npublic interface IActorSystemBuilder\r\n{\r\n  ActorSystem Create(string systemName);\r\n}\r\npublic interface IActorSystemInstaller\r\n{\r\n  void InstallActors(ActorSystem actorSystem);\r\n}\r\npublic interface IActorSystemBlockingStrategy\r\n{\r\n  void AwaitTermination(ActorSystem actorSystem);\r\n}\r\n```\r\n\r\n### IActorSystemBuilder\r\nThe *IActorSystemBuilder* interface (and its subsequent implementations) will be responsible for creating the actor systems in Akka.NET. This includes creating any HOCON configuration entries, as well as attaching those entries to whatever actor system is created.\r\n\r\n### IActorSystemInstaller\r\nThe *IActorSystemInstaller* interface is responsible for adding your custom actors to any given actor system instance. In most cases, you'll probably want to create your own implementation of this class to ensure that you can install your actors into a particular actor system.\r\n\r\n### IActorSystemBlockingStrategy\r\nThe *IActorSystemBlockingStrategy* interface (as its name implies) determines whether or not your actor system should be blocking your execution thread until the actor system terminates. If you're running your actor system as a console application, I recommend blocking the thread so that your application doesn't prematurely terminate, using a blocking implementation that looks like this:\r\n\r\n```csharp\r\npublic class WaitForTermination : IActorSystemBlockingStrategy\r\n{\r\n    public void AwaitTermination(ActorSystem actorSystem)\r\n    {\r\n        actorSystem.AwaitTermination();\r\n    }\r\n}\r\n\r\n```\r\nAlternatively, if you prefer not to block the thread, you can also do the implementation like this:\r\n```csharp\r\npublic class NonBlockingStrategy : IActorSystemBlockingStrategy\r\n{\r\n    public void AwaitTermination(ActorSystem actorSystem)\r\n    {\r\n        // Do nothing since no blocking needs to be done here\r\n    }\r\n}\r\n```\r\n\r\n## Open for Extension, but Closed to Modification\r\nThe idea behind Akka.Configuration is to create a simple framework that can be extended indefinitely without having to worrying about breaking changes caused by third-party libraries. That's why there are so few classes--this library encompasses the basic steps for setting up an Akka.NET actor system.\r\n\r\n## Extension Libraries\r\n[Akka.Configuration.Builders.*](https://github.com/philiplaureano/akka.configuration.builders) - These libraries have class implementations for the *IActorSystemBuilder* interface that allow you to generate HOCON config files using standard .NET dictionaries. You can find the NuGet packages for [Akka.Configuration.Builders.*](https://github.com/philiplaureano/akka.configuration.builders) [here](https://www.nuget.org/packages?q=akka.configuration).\r\n\r\n## Putting it all together\r\nOnce you have your custom implementations for all three interfaces in hand, then this is where the ActorSystemHost class can glue all of those implementations together:\r\n\r\n```csharp\r\npublic class ActorSystemHost\r\n{\r\n    private readonly IActorSystemBlockingStrategy _blockingStrategy;\r\n    private readonly IActorSystemBuilder _builder;\r\n    private readonly IActorSystemInstaller _installer;\r\n\r\n    public ActorSystemHost(IActorSystemBuilder builder, IActorSystemInstaller installer, \r\n        IActorSystemBlockingStrategy blockingStrategy)\r\n    {\r\n        _builder = builder;\r\n        _installer = installer;\r\n        _blockingStrategy = blockingStrategy;\r\n    }\r\n\r\n    public void Run(string systemName)\r\n    {\r\n        var actorSystem = _builder.Create(systemName);\r\n        _installer.InstallActors(actorSystem);\r\n        _blockingStrategy.AwaitTermination(actorSystem);\r\n    }\r\n}\r\n```\r\nAs you can see, the implementation is very simple, and all the code you see in the *ActorSystemHost.Run* will cover 90% of the boilerplate code required to get your actor system up and running. Here's an example of how to use the *ActorSystemHost* class:\r\n\r\n```csharp\r\nvar blockingStrategy = new WaitForTermination();\r\nvar builder = new YourBuilderImplementation();\r\nvar installer new YourActorSystemInstaller();\r\n\r\nvar host = new ActorSystemHost(builder, installer, blockingStrategy);\r\nhost.Run(\"MyActorSystem\");\r\n```\r\n\r\n##Installation\r\nYou can download the latest NuGet packages for Akka.Configuration [here](https://www.nuget.org/packages/Akka.Configuration)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}